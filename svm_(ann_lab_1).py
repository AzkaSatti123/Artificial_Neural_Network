# -*- coding: utf-8 -*-
"""SVM (ANN LAB#1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Xb5oaJL_DduW0VlMJ65ryGQpS24flrV8

#Initialization of all the essential Libraries
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
#from scikitlearn we import support vector classifier from the part of Support vector machine
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

"""#Covert the text based data(emails) into numerical data for machine learning algorithms"""

from sklearn.feature_extraction.text import TfidfVectorizer

"""#Remove Special Characters and Numbers"""

import re

"""# Step 1: Load the dataset"""

file_path = '/content/spam.csv'
data = pd.read_csv(file_path, encoding='latin1')
data = data[['class', 'message']]

data.head(5)

"""# Clean the Dataset"""

data = data.dropna()

data.isna().sum()

print('Emails dataset information')
print('\n')
data.info()

"""# Mapping 'ham' to 0 and 'spam' to 1"""

data['class'] = data['class'].map({'ham': 0, 'spam': 1})

print('AFTER MAPPING OR DEFINING THE CLASSES W.R.T to Labels of email:')
data.head()

"""#Text pre-processing"""

def clean_text(text):
    text = text.lower()  # Convert to lowercase
    text = re.sub(r'[^a-zA-Z\s]', '', text)  # Remove special characters and numbers
    text = re.sub(r'\s+', ' ', text)  # Remove extra spaces
    return text.strip()

data['message'] = data['message'].apply(clean_text)

"""# Split the dataset into training and testing sets"""

X = data['message']
y = data['class']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""# Convert text data into numerical features using TF-IDF"""

vectorizer = TfidfVectorizer(stop_words='english', max_features=3000)
X_train_tfidf = vectorizer.fit_transform(X_train)
X_test_tfidf = vectorizer.transform(X_test)

"""#Train and evaluate SVM with a Choosen kernels

* linear
* Polynomial
* RBF

# Evaluate SVM with the Linear Kernel
"""

print("\nEvaluating SVM with Linear Kernel...")
svm_linear = SVC(kernel='linear',probability=True, random_state=42)
svm_linear.fit(X_train_tfidf, y_train)
y_pred_linear = svm_linear.predict_proba(X_test_tfidf)[:,1]

"""# Define a threshold to convert continuous predictions to binary classes"""

threshold = 0.5
y_pred_linear_binary = [1 if pred >= threshold else 0 for pred in y_pred_linear]

accuracy_linear = accuracy_score(y_test, y_pred_linear_binary)
print(f"Model Accuracy (Linear kernel): {accuracy_linear:.4f}")

report_linear = classification_report(y_test, y_pred_linear_binary)
print("\nClassification Report (Linear kernel):")
print(report_linear)

"""# Function to plot confusion matrix"""

def plot_confusion_matrix(cm, kernel):
    disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=['Ham', 'Spam'])
    disp.plot(cmap='Blues')
    plt.title(f'Confusion Matrix ({kernel} kernel)')
    plt.show()

cm_linear = confusion_matrix(y_test, y_pred_linear_binary)

plot_confusion_matrix(cm_linear, 'Linear')

